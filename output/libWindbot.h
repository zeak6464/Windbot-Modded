// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by Embeddinator-4000.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "glib.h"
#include "mono_embeddinator.h"
#include "c-support.h"
#include "ExecutorBase.h"

MONO_EMBEDDINATOR_BEGIN_DECLS

typedef enum YGOSharp_Network_Enums_CtosMessage
{
    YGOSharp_Network_Enums_CtosMessage_Response = 1,
    YGOSharp_Network_Enums_CtosMessage_UpdateDeck = 2,
    YGOSharp_Network_Enums_CtosMessage_HandResult = 3,
    YGOSharp_Network_Enums_CtosMessage_TpResult = 4,
    YGOSharp_Network_Enums_CtosMessage_PlayerInfo = 16,
    YGOSharp_Network_Enums_CtosMessage_CreateGame = 17,
    YGOSharp_Network_Enums_CtosMessage_JoinGame = 18,
    YGOSharp_Network_Enums_CtosMessage_LeaveGame = 19,
    YGOSharp_Network_Enums_CtosMessage_Surrender = 20,
    YGOSharp_Network_Enums_CtosMessage_TimeConfirm = 21,
    YGOSharp_Network_Enums_CtosMessage_Chat = 22,
    YGOSharp_Network_Enums_CtosMessage_HsToDuelist = 32,
    YGOSharp_Network_Enums_CtosMessage_HsToObserver = 33,
    YGOSharp_Network_Enums_CtosMessage_HsReady = 34,
    YGOSharp_Network_Enums_CtosMessage_HsNotReady = 35,
    YGOSharp_Network_Enums_CtosMessage_HsKick = 36,
    YGOSharp_Network_Enums_CtosMessage_HsStart = 37,
    YGOSharp_Network_Enums_CtosMessage_RematchResponse = 240
} YGOSharp_Network_Enums_CtosMessage;

typedef enum YGOSharp_Network_Enums_GameState
{
    YGOSharp_Network_Enums_GameState_Lobby = 0,
    YGOSharp_Network_Enums_GameState_Hand = 1,
    YGOSharp_Network_Enums_GameState_Starting = 2,
    YGOSharp_Network_Enums_GameState_Duel = 3,
    YGOSharp_Network_Enums_GameState_End = 4,
    YGOSharp_Network_Enums_GameState_Side = 5
} YGOSharp_Network_Enums_GameState;

typedef enum YGOSharp_Network_Enums_PlayerChange
{
    YGOSharp_Network_Enums_PlayerChange_Observe = 8,
    YGOSharp_Network_Enums_PlayerChange_Ready = 9,
    YGOSharp_Network_Enums_PlayerChange_NotReady = 10,
    YGOSharp_Network_Enums_PlayerChange_Leave = 11
} YGOSharp_Network_Enums_PlayerChange;

typedef enum YGOSharp_Network_Enums_PlayerState
{
    YGOSharp_Network_Enums_PlayerState_None = 0,
    YGOSharp_Network_Enums_PlayerState_Response = 1
} YGOSharp_Network_Enums_PlayerState;

typedef enum YGOSharp_Network_Enums_PlayerType
{
    YGOSharp_Network_Enums_PlayerType_Undefined = -1,
    YGOSharp_Network_Enums_PlayerType_Player1 = 0,
    YGOSharp_Network_Enums_PlayerType_Player2 = 1,
    YGOSharp_Network_Enums_PlayerType_Player3 = 2,
    YGOSharp_Network_Enums_PlayerType_Player4 = 3,
    YGOSharp_Network_Enums_PlayerType_Player5 = 4,
    YGOSharp_Network_Enums_PlayerType_Player6 = 5,
    YGOSharp_Network_Enums_PlayerType_Observer = 7,
    YGOSharp_Network_Enums_PlayerType_Host = 16,
    YGOSharp_Network_Enums_PlayerType_Red = 11,
    YGOSharp_Network_Enums_PlayerType_Green = 12,
    YGOSharp_Network_Enums_PlayerType_Blue = 13,
    YGOSharp_Network_Enums_PlayerType_BabyBlue = 14,
    YGOSharp_Network_Enums_PlayerType_Pink = 15,
    YGOSharp_Network_Enums_PlayerType_Yellow = 16,
    YGOSharp_Network_Enums_PlayerType_White = 17,
    YGOSharp_Network_Enums_PlayerType_Gray = 18
} YGOSharp_Network_Enums_PlayerType;

typedef enum YGOSharp_Network_Enums_StocMessage
{
    YGOSharp_Network_Enums_StocMessage_GameMsg = 1,
    YGOSharp_Network_Enums_StocMessage_ErrorMsg = 2,
    YGOSharp_Network_Enums_StocMessage_SelectHand = 3,
    YGOSharp_Network_Enums_StocMessage_SelectTp = 4,
    YGOSharp_Network_Enums_StocMessage_HandResult = 5,
    YGOSharp_Network_Enums_StocMessage_TpResult = 6,
    YGOSharp_Network_Enums_StocMessage_ChangeSide = 7,
    YGOSharp_Network_Enums_StocMessage_WaitingSide = 8,
    YGOSharp_Network_Enums_StocMessage_CreateGame = 17,
    YGOSharp_Network_Enums_StocMessage_JoinGame = 18,
    YGOSharp_Network_Enums_StocMessage_TypeChange = 19,
    YGOSharp_Network_Enums_StocMessage_LeaveGame = 20,
    YGOSharp_Network_Enums_StocMessage_DuelStart = 21,
    YGOSharp_Network_Enums_StocMessage_DuelEnd = 22,
    YGOSharp_Network_Enums_StocMessage_Replay = 23,
    YGOSharp_Network_Enums_StocMessage_TimeLimit = 24,
    YGOSharp_Network_Enums_StocMessage_Chat = 25,
    YGOSharp_Network_Enums_StocMessage_HsPlayerEnter = 32,
    YGOSharp_Network_Enums_StocMessage_HsPlayerChange = 33,
    YGOSharp_Network_Enums_StocMessage_HsWatchChange = 34,
    YGOSharp_Network_Enums_StocMessage_Rematch = 241,
    YGOSharp_Network_Enums_StocMessage_WaitingRematch = 242
} YGOSharp_Network_Enums_StocMessage;

typedef MonoEmbedObject YGOSharp_Network_AsyncBinaryClient;
typedef MonoEmbedObject YGOSharp_Network_NetworkClient;
typedef MonoEmbedObject YGOSharp_Network_AsyncNetworkServer;
typedef MonoEmbedObject YGOSharp_Network_AsyncYGOClient;
typedef MonoEmbedObject YGOSharp_Network_BinaryClient;
typedef MonoEmbedObject YGOSharp_Network_NetworkServer;
typedef MonoEmbedObject YGOSharp_Network_YGOClient;
typedef MonoEmbedObject YGOSharp_Network_Utils_BinaryExtensions;
typedef MonoEmbedObject WindBot_Logger;
typedef MonoEmbedObject WindBot_WindBot;
typedef MonoEmbedObject WindBot_Program;
typedef MonoEmbedObject WindBot_CreateGameInfo;
typedef MonoEmbedObject WindBot_WindBotInfo;
typedef MonoEmbedObject WindBot_LaunchData;
typedef MonoEmbedObject WindBot_Game_Deck;
typedef MonoEmbedObject WindBot_Game_DecksManager;
typedef MonoEmbedObject WindBot_Game_GameBehavior;
typedef MonoEmbedObject WindBot_Game_GameClient;
typedef MonoEmbedObject WindBot_Game_GamePacketFactory;
typedef MonoEmbedObject WindBot_Game_Room;
typedef MonoEmbedObject WindBot_Game_LocationInfo;
typedef MonoEmbedObject WindBot_Game_AI_Decks_AltergeistExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_FamiliarPossessedExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_BlackwingExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_LuckyExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_BlueEyesMaxDragonExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_BurnExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_ChainBurnExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_CyberDragonExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_DoEverythingExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_DarkMagicianExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_DragunityExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_EvilswarmExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_FrogExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_GravekeeperExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_GraydleExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_GrenMajuThunderBoarderExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_HorusExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_LightswornExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_LightswornShaddoldinosour;
typedef MonoEmbedObject WindBot_Game_AI_Decks_MathmechExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_MokeyMokeyExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_MokeyMokeyKingExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_NekrozExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_OldSchoolExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_PhantasmExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_QliphortExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_Rank5Executor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_SkyStrikerExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_ST1732Executor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_TimeThiefExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_ToadallyAwesomeExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_TrickstarExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_YosenjuExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_HealingJAMExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_ImaginaryArkExecutor;
typedef MonoEmbedObject WindBot_Game_AI_Decks_CardId;
typedef MonoEmbedObject WindBot_Game_AI_Decks_Monsters;
typedef MonoEmbedObject WindBot_Game_AI_Decks_Spells;
typedef MonoEmbedObject WindBot_Game_AI_Decks_Traps;
typedef MonoEmbedObject WindBot_Game_AI_Decks_XYZs;
typedef MonoEmbedObject WindBot_Game_AI_Decks_Monster;
typedef MonoEmbedObject WindBot_Game_AI_Decks_Spell;
typedef MonoEmbedObject WindBot_Game_AI_Decks_Trap;

MONO_EMBEDDINATOR_API YGOSharp_Network_AsyncBinaryClient* YGOSharp_Network_AsyncBinaryClient_new(YGOSharp_Network_NetworkClient* client);
MONO_EMBEDDINATOR_API void YGOSharp_Network_AsyncBinaryClient_Send(YGOSharp_Network_AsyncBinaryClient* object, _ByteArray packet);
MONO_EMBEDDINATOR_API bool YGOSharp_Network_AsyncBinaryClient_get_IsConnected(YGOSharp_Network_AsyncBinaryClient* object);

MONO_EMBEDDINATOR_API YGOSharp_Network_NetworkClient* YGOSharp_Network_NetworkClient_new();
MONO_EMBEDDINATOR_API void YGOSharp_Network_NetworkClient_BeginSend(YGOSharp_Network_NetworkClient* object, _ByteArray data);
MONO_EMBEDDINATOR_API void YGOSharp_Network_NetworkClient_BeginReceive(YGOSharp_Network_NetworkClient* object);
MONO_EMBEDDINATOR_API bool YGOSharp_Network_NetworkClient_get_IsConnected(YGOSharp_Network_NetworkClient* object);
MONO_EMBEDDINATOR_API void YGOSharp_Network_NetworkClient_set_IsConnected(YGOSharp_Network_NetworkClient* object, bool value);

MONO_EMBEDDINATOR_API void YGOSharp_Network_AsyncNetworkServer_Start(YGOSharp_Network_AsyncNetworkServer* object);
MONO_EMBEDDINATOR_API void YGOSharp_Network_AsyncNetworkServer_Close(YGOSharp_Network_AsyncNetworkServer* object);
MONO_EMBEDDINATOR_API bool YGOSharp_Network_AsyncNetworkServer_get_IsListening(YGOSharp_Network_AsyncNetworkServer* object);
MONO_EMBEDDINATOR_API void YGOSharp_Network_AsyncNetworkServer_set_IsListening(YGOSharp_Network_AsyncNetworkServer* object, bool value);

MONO_EMBEDDINATOR_API YGOSharp_Network_AsyncYGOClient* YGOSharp_Network_AsyncYGOClient_new();
MONO_EMBEDDINATOR_API YGOSharp_Network_AsyncYGOClient* YGOSharp_Network_AsyncYGOClient_new_1(YGOSharp_Network_NetworkClient* client);
MONO_EMBEDDINATOR_API void YGOSharp_Network_AsyncYGOClient_Send(YGOSharp_Network_AsyncYGOClient* object, YGOSharp_Network_Enums_CtosMessage message);
MONO_EMBEDDINATOR_API void YGOSharp_Network_AsyncYGOClient_Send_1(YGOSharp_Network_AsyncYGOClient* object, YGOSharp_Network_Enums_CtosMessage message, int32_t value);

MONO_EMBEDDINATOR_API YGOSharp_Network_BinaryClient* YGOSharp_Network_BinaryClient_new(YGOSharp_Network_NetworkClient* client);
MONO_EMBEDDINATOR_API void YGOSharp_Network_BinaryClient_Update(YGOSharp_Network_BinaryClient* object);
MONO_EMBEDDINATOR_API void YGOSharp_Network_BinaryClient_Send(YGOSharp_Network_BinaryClient* object, _ByteArray packet);
MONO_EMBEDDINATOR_API bool YGOSharp_Network_BinaryClient_get_IsConnected(YGOSharp_Network_BinaryClient* object);

MONO_EMBEDDINATOR_API void YGOSharp_Network_NetworkServer_Start(YGOSharp_Network_NetworkServer* object);
MONO_EMBEDDINATOR_API void YGOSharp_Network_NetworkServer_Close(YGOSharp_Network_NetworkServer* object);
MONO_EMBEDDINATOR_API void YGOSharp_Network_NetworkServer_Update(YGOSharp_Network_NetworkServer* object);
MONO_EMBEDDINATOR_API bool YGOSharp_Network_NetworkServer_get_IsListening(YGOSharp_Network_NetworkServer* object);
MONO_EMBEDDINATOR_API void YGOSharp_Network_NetworkServer_set_IsListening(YGOSharp_Network_NetworkServer* object, bool value);

MONO_EMBEDDINATOR_API YGOSharp_Network_YGOClient* YGOSharp_Network_YGOClient_new();
MONO_EMBEDDINATOR_API YGOSharp_Network_YGOClient* YGOSharp_Network_YGOClient_new_1(YGOSharp_Network_NetworkClient* client);
MONO_EMBEDDINATOR_API void YGOSharp_Network_YGOClient_Send(YGOSharp_Network_YGOClient* object, YGOSharp_Network_Enums_CtosMessage message);
MONO_EMBEDDINATOR_API void YGOSharp_Network_YGOClient_Send_1(YGOSharp_Network_YGOClient* object, YGOSharp_Network_Enums_CtosMessage message, uint8_t value);
MONO_EMBEDDINATOR_API void YGOSharp_Network_YGOClient_Send_2(YGOSharp_Network_YGOClient* object, YGOSharp_Network_Enums_CtosMessage message, int32_t value);
MONO_EMBEDDINATOR_API void YGOSharp_Network_YGOClient_Send_3(YGOSharp_Network_YGOClient* object, YGOSharp_Network_Enums_CtosMessage message, int64_t value);

MONO_EMBEDDINATOR_API void WindBot_Logger_WriteLine(const char* message);
MONO_EMBEDDINATOR_API void WindBot_Logger_DebugWriteLine(const char* message);
MONO_EMBEDDINATOR_API void WindBot_Logger_WriteErrorLine(const char* message);

MONO_EMBEDDINATOR_API WindBot_WindBot* WindBot_WindBot_new();
MONO_EMBEDDINATOR_API void WindBot_WindBot_InitAndroid(const char* assetPath);
MONO_EMBEDDINATOR_API void WindBot_WindBot_AddDatabase(const char* databasePath);
MONO_EMBEDDINATOR_API void WindBot_WindBot_RunAndroid(const char* arg);

MONO_EMBEDDINATOR_API WindBot_Program* WindBot_Program_new();
MONO_EMBEDDINATOR_API const char* WindBot_Program_get_AssetPath();
MONO_EMBEDDINATOR_API void WindBot_Program_set_AssetPath(const char* value);

MONO_EMBEDDINATOR_API WindBot_CreateGameInfo* WindBot_CreateGameInfo_new();
MONO_EMBEDDINATOR_API uint32_t WindBot_CreateGameInfo_get_banlistHash(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_banlistHash(WindBot_CreateGameInfo* object, uint32_t value);
MONO_EMBEDDINATOR_API uint8_t WindBot_CreateGameInfo_get_allowed(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_allowed(WindBot_CreateGameInfo* object, uint8_t value);
MONO_EMBEDDINATOR_API bool WindBot_CreateGameInfo_get_dontCheckDeck(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_dontCheckDeck(WindBot_CreateGameInfo* object, bool value);
MONO_EMBEDDINATOR_API bool WindBot_CreateGameInfo_get_dontShuffleDeck(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_dontShuffleDeck(WindBot_CreateGameInfo* object, bool value);
MONO_EMBEDDINATOR_API uint32_t WindBot_CreateGameInfo_get_startingLP(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_startingLP(WindBot_CreateGameInfo* object, uint32_t value);
MONO_EMBEDDINATOR_API uint8_t WindBot_CreateGameInfo_get_startingDrawCount(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_startingDrawCount(WindBot_CreateGameInfo* object, uint8_t value);
MONO_EMBEDDINATOR_API uint8_t WindBot_CreateGameInfo_get_drawCountPerTurn(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_drawCountPerTurn(WindBot_CreateGameInfo* object, uint8_t value);
MONO_EMBEDDINATOR_API uint16_t WindBot_CreateGameInfo_get_timeLimitInSeconds(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_timeLimitInSeconds(WindBot_CreateGameInfo* object, uint16_t value);
MONO_EMBEDDINATOR_API uint64_t WindBot_CreateGameInfo_get_duelFlags(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_duelFlags(WindBot_CreateGameInfo* object, uint64_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_CreateGameInfo_get_t0Count(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_t0Count(WindBot_CreateGameInfo* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_CreateGameInfo_get_t1Count(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_t1Count(WindBot_CreateGameInfo* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_CreateGameInfo_get_bestOf(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_bestOf(WindBot_CreateGameInfo* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_CreateGameInfo_get_forb(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_forb(WindBot_CreateGameInfo* object, int32_t value);
MONO_EMBEDDINATOR_API uint16_t WindBot_CreateGameInfo_get_extraRules(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_extraRules(WindBot_CreateGameInfo* object, uint16_t value);
MONO_EMBEDDINATOR_API const char* WindBot_CreateGameInfo_get_notes(WindBot_CreateGameInfo* object);
MONO_EMBEDDINATOR_API void WindBot_CreateGameInfo_set_notes(WindBot_CreateGameInfo* object, const char* value);

MONO_EMBEDDINATOR_API WindBot_WindBotInfo* WindBot_WindBotInfo_new();
MONO_EMBEDDINATOR_API const char* WindBot_WindBotInfo_get_Name(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_Name(WindBot_WindBotInfo* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_WindBotInfo_get_Deck(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_Deck(WindBot_WindBotInfo* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_WindBotInfo_get_DeckFile(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_DeckFile(WindBot_WindBotInfo* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_WindBotInfo_get_Dialog(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_Dialog(WindBot_WindBotInfo* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_WindBotInfo_get_Host(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_Host(WindBot_WindBotInfo* object, const char* value);
MONO_EMBEDDINATOR_API int32_t WindBot_WindBotInfo_get_Port(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_Port(WindBot_WindBotInfo* object, int32_t value);
MONO_EMBEDDINATOR_API const char* WindBot_WindBotInfo_get_HostInfo(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_HostInfo(WindBot_WindBotInfo* object, const char* value);
MONO_EMBEDDINATOR_API int32_t WindBot_WindBotInfo_get_Version(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_Version(WindBot_WindBotInfo* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_WindBotInfo_get_Hand(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_Hand(WindBot_WindBotInfo* object, int32_t value);
MONO_EMBEDDINATOR_API bool WindBot_WindBotInfo_get_Debug(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_Debug(WindBot_WindBotInfo* object, bool value);
MONO_EMBEDDINATOR_API bool WindBot_WindBotInfo_get_Chat(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_Chat(WindBot_WindBotInfo* object, bool value);
MONO_EMBEDDINATOR_API int32_t WindBot_WindBotInfo_get_RoomId(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_RoomId(WindBot_WindBotInfo* object, int32_t value);
MONO_EMBEDDINATOR_API WindBot_CreateGameInfo* WindBot_WindBotInfo_get_CreateGame(WindBot_WindBotInfo* object);
MONO_EMBEDDINATOR_API void WindBot_WindBotInfo_set_CreateGame(WindBot_WindBotInfo* object, WindBot_CreateGameInfo* value);

MONO_EMBEDDINATOR_API WindBot_Game_Deck* WindBot_Game_Deck_new();
MONO_EMBEDDINATOR_API WindBot_Game_Deck* WindBot_Game_Deck_Load(const char* name);

MONO_EMBEDDINATOR_API void WindBot_Game_DecksManager_Init();

MONO_EMBEDDINATOR_API WindBot_Game_GameBehavior* WindBot_Game_GameBehavior_new(WindBot_Game_GameClient* game);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_GameBehavior_GetLocalPlayer(WindBot_Game_GameBehavior* object, int32_t player);
MONO_EMBEDDINATOR_API WindBot_Game_GameClient* WindBot_Game_GameBehavior_get_Game(WindBot_Game_GameBehavior* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameBehavior_set_Game(WindBot_Game_GameBehavior* object, WindBot_Game_GameClient* value);
MONO_EMBEDDINATOR_API YGOSharp_Network_YGOClient* WindBot_Game_GameBehavior_get_Connection(WindBot_Game_GameBehavior* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameBehavior_set_Connection(WindBot_Game_GameBehavior* object, YGOSharp_Network_YGOClient* value);
MONO_EMBEDDINATOR_API WindBot_Game_Deck* WindBot_Game_GameBehavior_get_Deck(WindBot_Game_GameBehavior* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameBehavior_set_Deck(WindBot_Game_GameBehavior* object, WindBot_Game_Deck* value);

MONO_EMBEDDINATOR_API WindBot_Game_GameClient* WindBot_Game_GameClient_new(WindBot_WindBotInfo* Info);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_Start(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_Tick(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_Chat(WindBot_Game_GameClient* object, const char* message, bool forced);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_Log(WindBot_Game_GameClient* object, const char* message, int32_t type);
MONO_EMBEDDINATOR_API YGOSharp_Network_YGOClient* WindBot_Game_GameClient_get_Connection(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_set_Connection(WindBot_Game_GameClient* object, YGOSharp_Network_YGOClient* value);
MONO_EMBEDDINATOR_API const char* WindBot_Game_GameClient_get_Username(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_set_Username(WindBot_Game_GameClient* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_Game_GameClient_get_Deck(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_set_Deck(WindBot_Game_GameClient* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_Game_GameClient_get_DeckFile(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_set_DeckFile(WindBot_Game_GameClient* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_Game_GameClient_get_Dialog(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_set_Dialog(WindBot_Game_GameClient* object, const char* value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_GameClient_get_Hand(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_set_Hand(WindBot_Game_GameClient* object, int32_t value);
MONO_EMBEDDINATOR_API bool WindBot_Game_GameClient_get_Debug(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_set_Debug(WindBot_Game_GameClient* object, bool value);
MONO_EMBEDDINATOR_API bool WindBot_Game_GameClient_get__chat(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_set__chat(WindBot_Game_GameClient* object, bool value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_GameClient_get_RoomId(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_set_RoomId(WindBot_Game_GameClient* object, int32_t value);
MONO_EMBEDDINATOR_API WindBot_CreateGameInfo* WindBot_Game_GameClient_get_CreateGame(WindBot_Game_GameClient* object);
MONO_EMBEDDINATOR_API void WindBot_Game_GameClient_set_CreateGame(WindBot_Game_GameClient* object, WindBot_CreateGameInfo* value);

MONO_EMBEDDINATOR_API WindBot_Game_GamePacketFactory* WindBot_Game_GamePacketFactory_new();

MONO_EMBEDDINATOR_API WindBot_Game_Room* WindBot_Game_Room_new();
MONO_EMBEDDINATOR_API bool WindBot_Game_Room_get_IsHost(WindBot_Game_Room* object);
MONO_EMBEDDINATOR_API void WindBot_Game_Room_set_IsHost(WindBot_Game_Room* object, bool value);
MONO_EMBEDDINATOR_API _StringArray WindBot_Game_Room_get_Names(WindBot_Game_Room* object);
MONO_EMBEDDINATOR_API void WindBot_Game_Room_set_Names(WindBot_Game_Room* object, _StringArray value);
MONO_EMBEDDINATOR_API _BoolArray WindBot_Game_Room_get_IsReady(WindBot_Game_Room* object);
MONO_EMBEDDINATOR_API void WindBot_Game_Room_set_IsReady(WindBot_Game_Room* object, _BoolArray value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_Room_get_Position(WindBot_Game_Room* object);
MONO_EMBEDDINATOR_API void WindBot_Game_Room_set_Position(WindBot_Game_Room* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_Room_get_Players(WindBot_Game_Room* object);
MONO_EMBEDDINATOR_API void WindBot_Game_Room_set_Players(WindBot_Game_Room* object, int32_t value);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_EvenlyMatched_ready(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_has_altergeist_left(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_EvenlyMatched_Repos(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_isAltergeist(WindBot_Game_AI_Decks_AltergeistExecutor* object, int64_t id);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_trap_can_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object, int32_t id);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Should_counter(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Should_activate_Protocol(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_is_should_not_negate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Multifaker_can_ss(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Multifaker_candeckss(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Protocol_activing(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_AltergeistExecutor_get_Hexstia_linkzone(WindBot_Game_AI_Decks_AltergeistExecutor* object, int32_t zone);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_get_linked_by_Hexstia(WindBot_Game_AI_Decks_AltergeistExecutor* object, int32_t place);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_bot_can_s_Meluseek(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_SpellSet(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_field_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_ChickenGame(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Anti_Spell_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_SecretVillage_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_G_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_NaturalExterio_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_SolemnStrike_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_SolemnJudgment_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Impermanence_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Hand_act_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_WakingtheDragon_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_GR_WC_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_ImperialOrder_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_EvenlyMatched_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Feather_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Storm_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Kunquery_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Marionetter_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Hexstia_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Meluseek_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Multifaker_handss(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Multifaker_deckss(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Silquitous_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Manifestation_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Protocol_negate_better(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Protocol_negate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Protocol_activate_not_use(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Spoofing_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_OneForOne_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Meluseek_summon(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Marionetter_summon(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Silquitous_summon(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Multifaker_summon(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_PotofDesires_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_PotofIndulgence_activate(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Anima_ss(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Linkuriboh_ss(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Linkuriboh_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Hexstia_ss(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_TripleBurstDragon_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_TripleBurstDragon_ss(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Needlefiber_ss(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Needlefiber_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Borrelsword_ss(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_Borrelsword_eff(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_tuner_summon(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_OnSelectHand(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_AltergeistExecutor_OnNewTurn(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_MonsterRepos(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_MonsterSet(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_AltergeistExecutor_MonsterSummon(WindBot_Game_AI_Decks_AltergeistExecutor* object);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_AltergeistExecutor_OnSelectPlace(WindBot_Game_AI_Decks_AltergeistExecutor* object, int64_t cardId, int32_t player, YGOSharp_OCGWrapper_Enums_CardLocation location, int32_t available);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_FamiliarPossessedExecutor_PotofExtravaganceActivate(WindBot_Game_AI_Decks_FamiliarPossessedExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_FamiliarPossessedExecutor_BorreloadDragoneff(WindBot_Game_AI_Decks_FamiliarPossessedExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_FamiliarPossessedExecutor_OnSelectHand(WindBot_Game_AI_Decks_FamiliarPossessedExecutor* object);

MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_BlueEyesMaxDragonExecutor_OnNewTurn(WindBot_Game_AI_Decks_BlueEyesMaxDragonExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_BlueEyesMaxDragonExecutor_OnSelectHand(WindBot_Game_AI_Decks_BlueEyesMaxDragonExecutor* object);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_BurnExecutor_OnSelectHand(WindBot_Game_AI_Decks_BurnExecutor* object);

MONO_EMBEDDINATOR_API _Int32Array WindBot_Game_AI_Decks_ChainBurnExecutor_all_List(WindBot_Game_AI_Decks_ChainBurnExecutor* object);
MONO_EMBEDDINATOR_API _Int32Array WindBot_Game_AI_Decks_ChainBurnExecutor_AbouluteKingBackJack_List_1(WindBot_Game_AI_Decks_ChainBurnExecutor* object);
MONO_EMBEDDINATOR_API _Int32Array WindBot_Game_AI_Decks_ChainBurnExecutor_AbouluteKingBackJack_List_2(WindBot_Game_AI_Decks_ChainBurnExecutor* object);
MONO_EMBEDDINATOR_API _Int32Array WindBot_Game_AI_Decks_ChainBurnExecutor_now_List(WindBot_Game_AI_Decks_ChainBurnExecutor* object);
MONO_EMBEDDINATOR_API _Int32Array WindBot_Game_AI_Decks_ChainBurnExecutor_pot_list(WindBot_Game_AI_Decks_ChainBurnExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_ChainBurnExecutor_Has_prevent_list_0(WindBot_Game_AI_Decks_ChainBurnExecutor* object, int32_t id);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_ChainBurnExecutor_Has_prevent_list_1(WindBot_Game_AI_Decks_ChainBurnExecutor* object, int32_t id);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_ChainBurnExecutor_OnSelectHand(WindBot_Game_AI_Decks_ChainBurnExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_ChainBurnExecutor_OnNewTurn(WindBot_Game_AI_Decks_ChainBurnExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_ChainBurnExecutor_OnNewPhase(WindBot_Game_AI_Decks_ChainBurnExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_ChainBurnExecutor_Ring_act(WindBot_Game_AI_Decks_ChainBurnExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_ChainBurnExecutor_MonsterRepos(WindBot_Game_AI_Decks_ChainBurnExecutor* object);

MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_DarkMagicianExecutor_OnNewPhase(WindBot_Game_AI_Decks_DarkMagicianExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_DarkMagicianExecutor_OnNewTurn(WindBot_Game_AI_Decks_DarkMagicianExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_DarkMagicianExecutor_OnSelectHand(WindBot_Game_AI_Decks_DarkMagicianExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_DarkMagicianExecutor_OnChainEnd(WindBot_Game_AI_Decks_DarkMagicianExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_DarkMagicianExecutor_MonsterRepos(WindBot_Game_AI_Decks_DarkMagicianExecutor* object);

MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_GrenMajuThunderBoarderExecutor_OnNewTurn(WindBot_Game_AI_Decks_GrenMajuThunderBoarderExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_GrenMajuThunderBoarderExecutor_OnNewPhase(WindBot_Game_AI_Decks_GrenMajuThunderBoarderExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_GrenMajuThunderBoarderExecutor_BorreloadDragoneff(WindBot_Game_AI_Decks_GrenMajuThunderBoarderExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_GrenMajuThunderBoarderExecutor_OnSelectHand(WindBot_Game_AI_Decks_GrenMajuThunderBoarderExecutor* object);

MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_LightswornExecutor_OnNewTurn(WindBot_Game_AI_Decks_LightswornExecutor* object);

MONO_EMBEDDINATOR_API _Int32Array WindBot_Game_AI_Decks_LightswornShaddoldinosour_all_List(WindBot_Game_AI_Decks_LightswornShaddoldinosour* object);
MONO_EMBEDDINATOR_API _Int32Array WindBot_Game_AI_Decks_LightswornShaddoldinosour_Useless_List(WindBot_Game_AI_Decks_LightswornShaddoldinosour* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_LightswornShaddoldinosour_OnNewPhase(WindBot_Game_AI_Decks_LightswornShaddoldinosour* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_LightswornShaddoldinosour_OnNewTurn(WindBot_Game_AI_Decks_LightswornShaddoldinosour* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_LightswornShaddoldinosour_Hand_act_eff(WindBot_Game_AI_Decks_LightswornShaddoldinosour* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_LightswornShaddoldinosour_CrystronNeedlefibersp(WindBot_Game_AI_Decks_LightswornShaddoldinosour* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_LightswornShaddoldinosour_CrystronNeedlefibereff(WindBot_Game_AI_Decks_LightswornShaddoldinosour* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_LightswornShaddoldinosour_OnSelectHand(WindBot_Game_AI_Decks_LightswornShaddoldinosour* object);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_MathmechExecutor_OnSelectHand(WindBot_Game_AI_Decks_MathmechExecutor* object);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_MathmechExecutor_OnSelectPlace(WindBot_Game_AI_Decks_MathmechExecutor* object, int64_t cardId, int32_t player, YGOSharp_OCGWrapper_Enums_CardLocation location, int32_t available);

MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_MokeyMokeyExecutor_OnRockPaperScissors(WindBot_Game_AI_Decks_MokeyMokeyExecutor* object);

MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_MokeyMokeyKingExecutor_OnRockPaperScissors(WindBot_Game_AI_Decks_MokeyMokeyKingExecutor* object);

MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_PhantasmExecutor_OnNewTurn(WindBot_Game_AI_Decks_PhantasmExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_PhantasmExecutor_OnSelectHand(WindBot_Game_AI_Decks_PhantasmExecutor* object);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_QliphortExecutor_OnSelectHand(WindBot_Game_AI_Decks_QliphortExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_QliphortExecutor_OnNewTurn(WindBot_Game_AI_Decks_QliphortExecutor* object);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_Rank5Executor_OnSelectHand(WindBot_Game_AI_Decks_Rank5Executor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Rank5Executor_OnNewTurn(WindBot_Game_AI_Decks_Rank5Executor* object);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_SkyStrikerExecutor_OnSelectHand(WindBot_Game_AI_Decks_SkyStrikerExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_SkyStrikerExecutor_OnNewTurn(WindBot_Game_AI_Decks_SkyStrikerExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_SkyStrikerExecutor_OnSelectYesNo(WindBot_Game_AI_Decks_SkyStrikerExecutor* object, int64_t desc);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_ST1732Executor_OnSelectHand(WindBot_Game_AI_Decks_ST1732Executor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_ST1732Executor_OnNewTurn(WindBot_Game_AI_Decks_ST1732Executor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_ST1732Executor_OnSelectYesNo(WindBot_Game_AI_Decks_ST1732Executor* object, int64_t desc);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TimeThiefExecutor_PotofExtravaganceActivate(WindBot_Game_AI_Decks_TimeThiefExecutor* object);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_ToadallyAwesomeExecutor_OnSelectHand(WindBot_Game_AI_Decks_ToadallyAwesomeExecutor* object);

MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_TrickstarExecutor_getLinkMarker(WindBot_Game_AI_Decks_TrickstarExecutor* object, int32_t id);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Five_Rainbow(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_TrickstarExecutor_SelectSTPlace(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_SpellSet(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_IsTrickstar(WindBot_Game_AI_Decks_TrickstarExecutor* object, int32_t id);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_field_activate(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_spell_trap_activate(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API _Int32Array WindBot_Game_AI_Decks_TrickstarExecutor_Useless_List(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Awaken_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Abyss_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Stage_Lock(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_GalaxyCyclone(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_BF_pos(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Feather_Act(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Sheep_Act(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Stage_act(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Pot_Act(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Hand_act_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Exterio_counter(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_G_act(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Pink_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Eater_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Eater_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Red_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Yellow_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_White_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_LockBird_act(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Reincarnation(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Crown_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Ts_reborn(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Yellow_sum(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Red_sum(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Pink_sum(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Tuner_ns(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Tuner_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Tuner_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Ring_act(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Linkuri_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Linkuri_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Crystal_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Crystal_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_TG_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Safedragon_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Phoneix_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Phoneix_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Unicorn_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Unicorn_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Snake_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Snake_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Missus_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Missus_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Borrel_ss(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_Borrel_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_GraveCall_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_DarkHole_eff(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_IsAllEnemyBetter(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_MonsterRepos(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_TrickstarExecutor_OnSelectHand(WindBot_Game_AI_Decks_TrickstarExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_TrickstarExecutor_OnNewTurn(WindBot_Game_AI_Decks_TrickstarExecutor* object);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_YosenjuExecutor_OnSelectHand(WindBot_Game_AI_Decks_YosenjuExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_YosenjuExecutor_OnNewTurn(WindBot_Game_AI_Decks_YosenjuExecutor* object);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_YosenjuExecutor_OnSelectYesNo(WindBot_Game_AI_Decks_YosenjuExecutor* object, int64_t desc);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_HealingJAMExecutor_OnSelectHand(WindBot_Game_AI_Decks_HealingJAMExecutor* object);
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_HealingJAMExecutor_OnNewTurn(WindBot_Game_AI_Decks_HealingJAMExecutor* object);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_HealingJAMExecutor_OnSelectPlace(WindBot_Game_AI_Decks_HealingJAMExecutor* object, int64_t cardId, int32_t player, YGOSharp_OCGWrapper_Enums_CardLocation location, int32_t available);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_HealingJAMExecutor_OnSelectYesNo(WindBot_Game_AI_Decks_HealingJAMExecutor* object, int64_t desc);

MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_ImaginaryArkExecutor_OnSelectHand(WindBot_Game_AI_Decks_ImaginaryArkExecutor* object);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_ImaginaryArkExecutor_OnSelectPlace(WindBot_Game_AI_Decks_ImaginaryArkExecutor* object, int64_t cardId, int32_t player, YGOSharp_OCGWrapper_Enums_CardLocation location, int32_t available);
MONO_EMBEDDINATOR_API bool WindBot_Game_AI_Decks_ImaginaryArkExecutor_OnSelectYesNo(WindBot_Game_AI_Decks_ImaginaryArkExecutor* object, int64_t desc);

MONO_EMBEDDINATOR_API WindBot_Game_AI_Decks_CardId* WindBot_Game_AI_Decks_CardId_new();
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Kunquery();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Kunquery(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Marionetter();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Marionetter(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Multifaker();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Multifaker(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_AB_JS();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_AB_JS(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_GO_SR();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_GO_SR(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_GR_WC();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_GR_WC(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_GB_HM();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_GB_HM(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Silquitous();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Silquitous(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_MaxxC();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_MaxxC(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Meluseek();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Meluseek(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_OneForOne();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_OneForOne(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_PotofDesires();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_PotofDesires(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_PotofIndulgence();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_PotofIndulgence(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Impermanence();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Impermanence(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_WakingtheDragon();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_WakingtheDragon(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_EvenlyMatched();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_EvenlyMatched(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Storm();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Storm(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Manifestation();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Manifestation(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Protocol();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Protocol(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Spoofing();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Spoofing(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_ImperialOrder();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_ImperialOrder(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_SolemnStrike();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_SolemnStrike(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_SolemnJudgment();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_SolemnJudgment(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_NaturalExterio();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_NaturalExterio(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_UltimateFalcon();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_UltimateFalcon(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Borrelsword();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Borrelsword(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_FWD();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_FWD(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_TripleBurstDragon();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_TripleBurstDragon(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_HeavymetalfoesElectrumite();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_HeavymetalfoesElectrumite(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Isolde();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Isolde(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Hexstia();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Hexstia(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Needlefiber();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Needlefiber(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Kagari();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Kagari(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Shizuku();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Shizuku(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Linkuriboh();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Linkuriboh(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Anima();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Anima(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_SecretVillage();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_SecretVillage(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_DarkHole();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_DarkHole(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_NaturalBeast();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_NaturalBeast(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_SwordsmanLV7();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_SwordsmanLV7(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_RoyalDecreel();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_RoyalDecreel(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Anti_Spell();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Anti_Spell(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Hayate();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Hayate(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Raye();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Raye(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Drones_Token();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Drones_Token(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_CardId_get_Iblee();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_CardId_set_Iblee(int32_t value);

MONO_EMBEDDINATOR_API WindBot_Game_AI_Decks_Monsters* WindBot_Game_AI_Decks_Monsters_new();
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monsters_get_TimeThiefWinder();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monsters_set_TimeThiefWinder(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monsters_get_TimeThiefBezelShip();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monsters_set_TimeThiefBezelShip(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monsters_get_TimeThiefCronocorder();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monsters_set_TimeThiefCronocorder(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monsters_get_TimeThiefRegulator();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monsters_set_TimeThiefRegulator(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monsters_get_PhotonTrasher();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monsters_set_PhotonTrasher(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monsters_get_PerformTrickClown();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monsters_set_PerformTrickClown(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monsters_get_ThunderKingRaiOh();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monsters_set_ThunderKingRaiOh(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monsters_get_MaxxC();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monsters_set_MaxxC(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monsters_get_AshBlossomAndJoyousSpring();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monsters_set_AshBlossomAndJoyousSpring(int32_t value);

MONO_EMBEDDINATOR_API WindBot_Game_AI_Decks_Spells* WindBot_Game_AI_Decks_Spells_new();
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spells_get_Raigeki();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spells_set_Raigeki(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spells_get_FoolishBurial();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spells_set_FoolishBurial(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spells_get_TimeThiefStartup();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spells_set_TimeThiefStartup(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spells_get_TimeThiefHack();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spells_set_TimeThiefHack(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spells_get_HarpieFeatherDuster();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spells_set_HarpieFeatherDuster(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spells_get_PotOfDesires();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spells_set_PotOfDesires(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spells_get_PotofExtravagance();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spells_set_PotofExtravagance(int32_t value);

MONO_EMBEDDINATOR_API WindBot_Game_AI_Decks_Traps* WindBot_Game_AI_Decks_Traps_new();
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Traps_get_SolemnWarning();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Traps_set_SolemnWarning(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Traps_get_SolemStrike();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Traps_set_SolemStrike(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Traps_get_SolemnJudgment();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Traps_set_SolemnJudgment(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Traps_get_TimeThiefRetrograte();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Traps_set_TimeThiefRetrograte(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Traps_get_PhantomKnightsShade();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Traps_set_PhantomKnightsShade(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Traps_get_TimeThiefFlyBack();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Traps_set_TimeThiefFlyBack(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Traps_get_Crackdown();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Traps_set_Crackdown(int32_t value);

MONO_EMBEDDINATOR_API WindBot_Game_AI_Decks_XYZs* WindBot_Game_AI_Decks_XYZs_new();
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_XYZs_get_TimeThiefRedoer();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_XYZs_set_TimeThiefRedoer(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_XYZs_get_TimeThiefPerpetua();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_XYZs_set_TimeThiefPerpetua(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_XYZs_get_CrazyBox();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_XYZs_set_CrazyBox(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_XYZs_get_GagagaCowboy();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_XYZs_set_GagagaCowboy(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_XYZs_get_Number39Utopia();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_XYZs_set_Number39Utopia(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_XYZs_get_NumberS39UtopiatheLightning();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_XYZs_set_NumberS39UtopiatheLightning(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_XYZs_get_NumberS39UtopiaOne();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_XYZs_set_NumberS39UtopiaOne(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_XYZs_get_DarkRebellionXyzDragon();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_XYZs_set_DarkRebellionXyzDragon(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_XYZs_get_EvilswarmExcitonKnight();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_XYZs_set_EvilswarmExcitonKnight(int32_t value);

MONO_EMBEDDINATOR_API WindBot_Game_AI_Decks_Monster* WindBot_Game_AI_Decks_Monster_new();
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_AmusiPerformer();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_AmusiPerformer(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_Candy();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_Candy(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_CureBlue();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_CureBlue(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_CureRed();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_CureRed(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_Giftarist();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_Giftarist(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_Guitarna();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_Guitarna(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_HowlingBird();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_HowlingBird(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_PeaceHolder();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_PeaceHolder(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_Phickup();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_Phickup(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_CanDLive();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_CanDLive(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_CurePurple();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_CurePurple(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Monster_get_HowlingPerformer();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Monster_set_HowlingPerformer(int32_t value);

MONO_EMBEDDINATOR_API WindBot_Game_AI_Decks_Spell* WindBot_Game_AI_Decks_Spell_new();
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spell_get_BlueMedicine();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spell_set_BlueMedicine(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spell_get_Devastation();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spell_set_Devastation(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spell_get_Fusion();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spell_set_Fusion(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spell_get_Charity();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spell_set_Charity(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spell_get_JamPStart();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spell_set_JamPStart(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spell_get_JamPSet();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spell_set_JamPSet(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spell_get_RedMedicine();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spell_set_RedMedicine(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Spell_get_Restart();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Spell_set_Restart(int32_t value);

MONO_EMBEDDINATOR_API WindBot_Game_AI_Decks_Trap* WindBot_Game_AI_Decks_Trap_new();
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Trap_get_ComebackFeelshock();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Trap_set_ComebackFeelshock(int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_AI_Decks_Trap_get_PsychicTrapHole();
MONO_EMBEDDINATOR_API void WindBot_Game_AI_Decks_Trap_set_PsychicTrapHole(int32_t value);

MONO_EMBEDDINATOR_API WindBot_Game_LocationInfo* WindBot_Game_LocationInfo_new();
MONO_EMBEDDINATOR_API int32_t WindBot_Game_LocationInfo_get_controler(WindBot_Game_LocationInfo* object);
MONO_EMBEDDINATOR_API void WindBot_Game_LocationInfo_set_controler(WindBot_Game_LocationInfo* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_LocationInfo_get_location(WindBot_Game_LocationInfo* object);
MONO_EMBEDDINATOR_API void WindBot_Game_LocationInfo_set_location(WindBot_Game_LocationInfo* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_LocationInfo_get_sequence(WindBot_Game_LocationInfo* object);
MONO_EMBEDDINATOR_API void WindBot_Game_LocationInfo_set_sequence(WindBot_Game_LocationInfo* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t WindBot_Game_LocationInfo_get_position(WindBot_Game_LocationInfo* object);
MONO_EMBEDDINATOR_API void WindBot_Game_LocationInfo_set_position(WindBot_Game_LocationInfo* object, int32_t value);

MONO_EMBEDDINATOR_API WindBot_LaunchData* WindBot_LaunchData_new();
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_Name(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_Name(WindBot_LaunchData* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_Deck(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_Deck(WindBot_LaunchData* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_DeckFile(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_DeckFile(WindBot_LaunchData* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_Dialog(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_Dialog(WindBot_LaunchData* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_Host(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_Host(WindBot_LaunchData* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_Port(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_Port(WindBot_LaunchData* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_HostInfo(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_HostInfo(WindBot_LaunchData* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_Version(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_Version(WindBot_LaunchData* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_Hand(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_Hand(WindBot_LaunchData* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_Debug(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_Debug(WindBot_LaunchData* object, const char* value);
MONO_EMBEDDINATOR_API const char* WindBot_LaunchData_get_Chat(WindBot_LaunchData* object);
MONO_EMBEDDINATOR_API void WindBot_LaunchData_set_Chat(WindBot_LaunchData* object, const char* value);

MONO_EMBEDDINATOR_END_DECLS
